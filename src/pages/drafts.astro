---
import BaseLayout from "../layout/BaseLayout.astro";
import { getCollection } from "astro:content";
import { getPostLink } from "../utils/ids";
import { getRecipeUrl } from "../utils/recipes";
import { formatDate } from "../utils/date";
import type { CollectionEntry } from 'astro:content';

// Redirect to home if not in development
if (!import.meta.env.DEV) {
  return Astro.redirect('/');
}

type BaseItem = {
  id: string;
  collection: "posts" | "recipes";
  data: {
    title?: string;
    date?: Date;
    published?: boolean;
    description?: string;
  };
  body: string;
  slug: string;
};

type FilteredItem = CollectionEntry<"posts" | "recipes"> & {
  reason: string;
};

// Function to check if an item is filtered out
function isFiltered(item: CollectionEntry<"posts" | "recipes">) {
  const reasons: string[] = [];
  
  // Check if unpublished
  if (!item.data.published) reasons.push("unpublished");
  
  // Check if title is missing
  if (!item.data.title) reasons.push("missing title");
  
  // Check date issues
  if (!item.data.date) {
    reasons.push("missing date");
  } else if (isNaN(new Date(item.data.date).getTime())) {
    reasons.push("invalid date format");
  } else if (new Date(item.data.date) > new Date()) {
    reasons.push("scheduled for future");
  }
  
  // Check if description is missing
  if (!item.data.description) reasons.push("missing description");
  
  return reasons.length > 0 ? { reason: reasons.join(", ") } : null;
}

// Get all posts and recipes
const allPosts = await getCollection("posts");
const allRecipes = await getCollection("recipes");

// Filter posts and recipes that would be excluded
const filteredPosts: FilteredItem[] = allPosts
  .filter((post): post is CollectionEntry<"posts"> => isFiltered(post) !== null)
  .map(post => ({ ...post, reason: isFiltered(post)!.reason }));

const filteredRecipes: FilteredItem[] = allRecipes
  .filter((recipe): recipe is CollectionEntry<"recipes"> => isFiltered(recipe) !== null)
  .map(recipe => ({ ...recipe, reason: isFiltered(recipe)!.reason }));
---

<BaseLayout pageTitle="Drafts (Development Only)" description="Draft posts and recipes">
  <div class="container mx-auto px-4">
    <h1 class="text-4xl font-bold mb-8 text-center">Drafts</h1>
    <p class="text-amber-600 text-center mb-8">⚠️ This page is only available in development mode</p>
    
    {filteredPosts.length === 0 && filteredRecipes.length === 0 ? (
      <p class="text-gray-600 text-center py-8">No drafts found.</p>
    ) : (
      <div class="grid md:grid-cols-2 gap-8">
        <div>
          <h2 class="text-2xl font-semibold mb-4 text-center">Draft Posts</h2>
          {filteredPosts.length === 0 ? (
            <p class="text-gray-600 text-center py-4">No draft posts found.</p>
          ) : (
            <ul class="space-y-4">
              {filteredPosts.map((post) => (
                <li class="border-b pb-4">
                  <a href={getPostLink(post)} class="text-xl font-medium hover:underline">
                    {post.data.title || post.id}
                  </a>
                  <div class="text-sm text-gray-600 mt-1">
                    <div class="flex flex-wrap gap-2 mb-2">
                      {post.reason.split(", ").map((r) => (
                        <span class="bg-yellow-100 px-2 py-1 rounded text-xs">{r}</span>
                      ))}
                    </div>
                    {post.data.date && 
                      <span class="text-xs">Date: {formatDate(post.data.date)}</span>
                    }
                  </div>
                  {post.data.description && 
                    <p class="text-gray-700 mt-2">{post.data.description}</p>
                  }
                </li>
              ))}
            </ul>
          )}
        </div>

        <div>
          <h2 class="text-2xl font-semibold mb-4 text-center">Draft Recipes</h2>
          {filteredRecipes.length === 0 ? (
            <p class="text-gray-600 text-center py-4">No draft recipes found.</p>
          ) : (
            <ul class="space-y-4">
              {filteredRecipes.map((recipe) => (
                <li class="border-b pb-4">
                  <a href={getRecipeUrl(recipe)} class="text-xl font-medium hover:underline">
                    {recipe.data.title || recipe.id}
                  </a>
                  <div class="text-sm text-gray-600 mt-1">
                    <div class="flex flex-wrap gap-2 mb-2">
                      {recipe.reason.split(", ").map((r) => (
                        <span class="bg-yellow-100 px-2 py-1 rounded text-xs">{r}</span>
                      ))}
                    </div>
                    {recipe.data.date && 
                      <span class="text-xs">Date: {formatDate(recipe.data.date)}</span>
                    }
                  </div>
                  {recipe.data.description && 
                    <p class="text-gray-700 mt-2">{recipe.data.description}</p>
                  }
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    )}
  </div>
</BaseLayout>
