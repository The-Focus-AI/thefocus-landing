---
import ArticleLayout from "../../layout/ArticleLayout.astro";
import { getSlug, getTagSlug, getSectionTag, getTagDisplay } from "../../utils/ids";
import { getPosts, getNextPost, getPrevPost } from "../../utils/posts";
import type { CollectionEntry } from 'astro:content';
import { render } from "astro:content";
import PostImage from "../../components/post-image.astro";
import RelatedPost from "../../components/related/related-post.astro";
import EmailSignup from "../../components/email-signup.astro";
import { ElevenLabsAudioNative } from "../../components/audio-player.tsx";
import { formatDate } from "../../utils/date";
import BlogPostSchema from "../../components/schemas/post.astro";
import BreadcrumbList from "../../components/schemas/breadcrumb.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getPosts();

  const paths =  blogEntries.map(entry => ({
    params: { id: getSlug(entry) }, props: { entry },
  }));

  return paths;
}


const { entry } = Astro.props;
type Props = {
  entry: CollectionEntry<'posts'>;
};
const { Content } = await render(entry);

const slug = getSlug(entry);

const formattedPublishDate = formatDate(entry.data.date);


const sectionTag = getSectionTag(entry.data.tags);

const nextPost = await getNextPost(entry);
const prevPost = await getPrevPost(entry);

// Get the image for the post
const images = await import.meta.glob<{ default: ImageMetadata }>('/src/content/assets/cards/*.{jpeg,jpg,png,gif}');
const img_key= `/src/content/assets/cards/${entry.data.image}`;  
if (!images[img_key]) throw new Error(`Image not found: ${img_key}`);

// @ts-ignore
const image = await images[img_key]().src;

---
<ArticleLayout pageTitle={entry.data.title} description={entry.data.description} category="blog" openGraphImage={`open-graph/${slug}.png`}>
  <BlogPostSchema 
  slot="head"
  title={entry.data.title}
  description={entry.data.description}
  publishDate={entry.data.date}
  author={entry.data.author}
  image={ image} 
  keywords={entry.data.tags}
/>
<BreadcrumbList slot="head" />
<div slot="hero">
  <div class="not-prose font-fraunces">
    {sectionTag && <p class=" pb-4 text-gray-500 max-w-prose hover:underline">
      <a href={`/${sectionTag}`}>{getTagDisplay(sectionTag)}</a>
    </p>}
    <h1 class="text-4xl font-bold text-gray-900 pb-2">{entry.data.title}</h1>

    <h2 class="text-lg font-bold text-gray-500 py-4 leading-snug">{entry.data.description}</h2>
  </div>
</div>
<div class="pt-4">
  <ElevenLabsAudioNative 
  client:only="react" 
  publicUserId="35dce06c47f602962978963a788374c31ce9d25a7764e80220eae64f51bfc6f3" 
  projectId={entry.data.audio}/>
</div>

<div class="flex flex-col sm:flex-row flex-wrap gap-2 justify-between font-fraunces">
  <ul class="flex flex-row flex-wrap gap-2">
    {entry.data.tags?.map((tag) => <li><a href={getTagSlug(tag)}>{getTagDisplay(tag)}</a></li>)}
  </ul>
  <div class="flex flex-row flex-wrap gap-2 italic">
    <a class="italic hover:underline" href="mailto:wschenk@thefocus.ai">Will Schenk</a>
    <span >{formattedPublishDate}</span> 
  </div>
</div>
{entry.data.image && <PostImage post={entry} />}

  <div class="prose lg:prose-xl max-w-prose article font-fraunces">
  <div class="content">
      <Content />
      <p class="text-right py-2 "> <a class="italic hover:underline" href="mailto:wschenk@thefocus.ai">Will Schenk</a> <span class="text-sm ">{formattedPublishDate}</span> </p>
  </div>
</div>

<div slot="sidebar" class="font-fraunces">
  <h3 class="text-xl font-bold mb-6">Related Posts</h3>
  
  
    {nextPost && <RelatedPost post={nextPost} />}
    {prevPost && <RelatedPost post={prevPost} />}
</div>
</ArticleLayout>

<style is:global>

.article li {
  margin-bottom: 0 !important;  
  margin-top: 0 !important;
}
  

.content p:first-of-type::first-letter {
  float: left;

  font-size: 3.5rem;
  line-height: 3.5rem;
  font-weight: 700;
  margin-right: 1rem;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding: 0;
}


blockquote {
  quotes: none !important;
  font-style: normal !important;
  /*font-family: 'Times New Roman', Times, serif !important;*/
  font-weight: 700 !important;
}

blockquote[data-callout] {
  padding: 1rem;
  border-radius: 1rem;
}

blockquote .callout-title {
display: flex;
}

blockquote[data-callout="error"] {
  background-color: rgb(255, 95, 122)
}

blockquote[data-callout="tip"] {
  background-color: rgb(136, 136, 220);
}

blockquote[data-callout="note"] {
  background-color: rgb(136, 220, 136);
}

blockquote p {
  font-weight: 300;
}

/*
.prose p:first-child::first-line {
    font-variant: small-caps;
    font-size: 1.5rem;
}

.prose blockquote p:first-child::first-line {
  font-variant: normal;
  font-size: 1.2rem;
}
  */

/* img descriptions */
img + em {
  margin-top: -2em;
  font-size: 1rem;
  line-height: 1rem;
  display: block;
}
</style>
