---
import { getRecipeUrl, getSection } from "../utils/recipes";
import { formatDateShort } from "../utils/date";
const {recipes,grouping="section"} = Astro.props;

// Helper function to check if a recipe is published within the last 30 days
function isRecentRecipe(recipe) {
  if (!recipe.data.published || !recipe.data.date) return false;
  const recipeDate = new Date(recipe.data.date);
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  return recipeDate >= thirtyDaysAgo;
}

let uniqueSections = [...new Set(recipes.flatMap(recipe => recipe.data.section ?? []))];  
let sectionMapPromises = uniqueSections.map(async (section) => ({
    section,
    recipes: recipes.filter(recipe => recipe.data.section?.includes(section)),
    info: await getSection(section)
}));

if (grouping === "journey") {
    uniqueSections = [...new Set(recipes.flatMap(recipe => recipe.data.journey ?? []))];

    sectionMapPromises = uniqueSections.map(async (section) => ({
        section,
        recipes: recipes.filter(recipe => recipe.data.journey?.includes(section)),
        info: await getSection(section)
    }));
}

const sectionMap = await Promise.all(sectionMapPromises);

---
<ul class="leading-tight">
    {sectionMap.map((section) => (
        <li class="sm:py-4">
            { grouping !== "journey" && (section.info ? 
            (<><h2 class="text-2xl italic font-light pt-8 pb-4">{section.info.data.title}</h2>
            <div class="md:ml-8 lg:ml-16 prose pt-4 pb-8" set:html={section.info.rendered.html}></div></>) :
             <h2 class="text-2xl italic font-light py-8">{section.section}</h2>)}

            
            <ul class="md:ml-8 lg:ml-16 pt-4">
                {section.recipes.map((recipe) => (
                    <li class="w-full flex flex-row pb-4">
                        <a href={getRecipeUrl(recipe)}>
                            <span class="hidden sm:inline text-sm text-gray-500">{formatDateShort(recipe.data.date)}</span>
                            <span class="no-underline hover:underline font-semibold">{recipe.data.published ? "" : "[DRAFT] "}{recipe.data.title}</span>
                            {isRecentRecipe(recipe) && (
                                <span class="ml-2 text-orange-500 font-normal">new</span>
                            )}
                        </a>
                        <span class="dots flex-grow underline border-b-2 border-slate-500 border-dotted"></span>
                        <span>
                            {recipe.data.tech.map((tech) => (
                                <a class="pr-2 bg-gray-100 hover:underline" href={`/recipes/${tech}`}>{tech}</a>
                            ))}
                        </span>
                        
                    </li>
                ))}
            </ul>
        </li>
        
    ))}
</ul>

<style>
    .adots {
        position: relative;
  overflow: hidden;
    }

.daots::after {
  position: absolute;
  padding-left: .25ch;
  content: " . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . "
      ". . . . . . . . . . . . . . . . . . . . . . . ";
  text-align: right;
}
</style>